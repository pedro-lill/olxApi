para criar uma nova api :
    dotnet new webapi --name FilmesApi

para executar a api:
    dotnet run --project FilmesApi/FilmesApi.csproj

history |grep docker

        <comandos importantes>
take = pegar qtd de registros
skip = pular qtd de registros
apllyTo = aplicavel em f(x) ou propriedade    (é como se fosse uma validação)
SaveChanges = salva as alterações no banco de dados
Add = adiciona um novo registro no banco de dados
NoContent = retorna um status 204


dotnet add package Microsoft.AspNetCore.Mvc.NewtonsoftJson --version 7.0.2
<PackageReference Include="Microsoft.AspNetCore.Mvc.NewtonsoftJson" Version="7.0.2" />


<PackageReference Include="AutoMapper.Extensions.Microsoft.DependencyInjection" />


Recentemente, vimos que utilizar o DbContext é 
uma das principais maneiras de acessar o banco de dados.

assinale o que for verdadeiro:

o dbcontext prove uma sintaze fora do ecopo c para acessar o banco de dados
    //false
aumenta a performance de acesso ao banco
    //false
abstrair a logica de acesso ao banco de dados
    //true
servew apenas para colocarmos nosso proprio codigo de acesso ao banco


http://localhost:5287/filme/?skip=3&take=30


Como recuperar informações da API através da criação de actions.
O verbo GET visa retornar recursos da API.
Como enviar parâmetros através da URL de requisição.
Como filtrar recursos para retornar para o usuário utilizando LINQ.
Status 404 indica que um recurso não foi encontrado.
Como tornar nossos retornos mais enxutos através de conceitos de paginação.
Como aplicar paginação através dos métodos Skip() e Take().

Quando criamos um recurso novo no sistema através do verbo POST,
 há uma convenção do que deve ser retornado caso a requisição tenha sido efetuada com sucesso.
 created + location com numero 201


para fazer migrations no linux:
    dotnet tool install --global dotnet-ef
    dotnet ef migrations add OlxMigration
    dotnet ef database update

    importante colocar ID user e senha no appsettings.json
    além de colocar o nome do banco de dados


Padrao DTO (Data Transfer Object)
    é um objeto que contem apenas os dados que queremos retornar para o usuario
    é um objeto que contem apenas os dados que queremos receber do usuario


    Como abrir uma conexão entre a API e o banco de dados através do EntityFramework.
-- comando : dotnet ef migrations add FilmeMigration
-- comando : dotnet ef database update

    Como gerar migrations com .NET 6 e mapear nosso objeto no banco de dados.

    O DbContext serve como ponte e para fazer operações no banco.

    Como injetar o DbContext em nosso controlador a fim de acessar o banco de dados.

    Como salvar as alterações no banco de dados através do método SaveChanges() :
    
    DTOs nos ajudam a não deixar nosso modelo de banco de dados exposto.

    Como fazer conversões práticas entre diferentes tipos através do AutoMapper.


Para altera através do patch:
    [
        {
            "op" : "replace",
            "path" : "/nome",
            "value" : "novo nome"
        }
    ]

    <history |grep microsoft>
        history CMD



O verbo PUT pode ser utilizado quando queremos atualizar algum recurso no sistema.

O verbo PATCH também pode ser utilizado para atualizações, porém de maneira parcial.

Apesar do verbo PATCH não exigir a passagem completa do objeto a ser atualizado, exige uma configuração mais complexa.

O verbo DELETE deve ser utilizado quando queremos deletar um recurso no sistema.

Quando um recurso é atualizado ou removido com sucesso, devemos retornar status 204 (No Content).

O Swagger auxilia o processo de entendimento sobre uma rota, seus parâmetros e retornos.''


    ------------------              28/02/2023          ------------------

Aqui você tem três níveis de blocos de código, começando do bloco de código mais interno e trabalhando para fora:

um métodoMain()
uma aulaProgram
um espaço de nomesMyNewApp

Um método é um bloco de código que é uma unidade de execução. Em outras palavras, uma vez que o método é chamado pelo seu nome, todo o método será executado até que:

o tempo de execução encontra a returnpalavra-chave ou
o tempo de execução encontra uma exceção e não pode continuar, ou
o tempo de execução executa com êxito cada linha de código no método.

-> Os blocos de código definem estruturas de nível superior, como namespaces, classes e métodos.
-> Assim como os blocos de código afetam a visibilidade de variáveis definidas dentro de estruturas de nível inferior, 
 como instruções de decisão e iteração, os blocos de código também afetam a visibilidade de métodos entre classes e classes entre namespaces.
-> Você pode adicionar a usinginstrução aos arquivos de código para instruir o compilador onde procurar referências a classes.

 Microsoft recomenda que você considere estas convenções:

->Nunca use formulário de linha única (por exemplo: if (flag) Console.WriteLine(flag);
->O uso de colchetes é sempre aceito e obrigatório se qualquer bloco de uma instrução composta if/else if/.../else 
 usar colchetes ou se um único corpo de instrução abranger várias linhas.
->As chaves podem ser omitidas apenas se o corpo de cada bloco associado a uma instrução composta if/else if/.../else for colocada em uma única linha.

   
   Guid.NewGuid().ToString();

    O Guid.NewGuid()método retorna um novo GUID único.
    Um GUID é um número de 128 bits que é garantido para ser único
     em todo o mundo, e é frequentemente usado 
     para identificar de forma exclusiva recursos 
     em sistemas distribuídos.

